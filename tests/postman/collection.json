{
	"info": {
		"_postman_id": "12345678-1234-1234-1234-123456789abc",
		"name": "Demo Inventory API",
		"description": "Postman collection for testing all Product endpoints in the Demo Inventory Microservice",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "Get All Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"if (pm.response.json().length > 0) {",
									"    pm.test(\"Product structure is valid\", function () {",
									"        const product = pm.response.json()[0];",
									"        pm.expect(product).to.have.property('id');",
									"        pm.expect(product).to.have.property('name');",
									"        pm.expect(product).to.have.property('description');",
									"        pm.expect(product).to.have.property('sku');",
									"        pm.expect(product).to.have.property('price');",
									"        pm.expect(product).to.have.property('quantityInStock');",
									"        pm.expect(product).to.have.property('createdAt');",
									"        pm.expect(product).to.have.property('updatedAt');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains created product\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson.name).to.eql(\"Test Product\");",
									"    pm.expect(responseJson.description).to.eql(\"A test product for API testing\");",
									"    pm.expect(responseJson.sku).to.eql(\"TEST-001\");",
									"    pm.expect(responseJson.price).to.eql(29.99);",
									"    pm.expect(responseJson.quantityInStock).to.eql(100);",
									"});",
									"",
									"pm.test(\"Product has timestamps\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('createdAt');",
									"    pm.expect(responseJson).to.have.property('updatedAt');",
									"});",
									"",
									"pm.test(\"Location header is present\", function () {",
									"    pm.expect(pm.response.headers.has(\"Location\")).to.be.true;",
									"});",
									"",
									"// Store the created product ID for other tests",
									"const responseJson = pm.response.json();",
									"pm.collectionVariables.set(\"createdProductId\", responseJson.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Product\",\n  \"description\": \"A test product for API testing\",\n  \"sku\": \"TEST-001\",\n  \"price\": 29.99,\n  \"quantityInStock\": 100\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Product structure is valid\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('name');",
									"    pm.expect(responseJson).to.have.property('description');",
									"    pm.expect(responseJson).to.have.property('sku');",
									"    pm.expect(responseJson).to.have.property('price');",
									"    pm.expect(responseJson).to.have.property('quantityInStock');",
									"    pm.expect(responseJson).to.have.property('createdAt');",
									"    pm.expect(responseJson).to.have.property('updatedAt');",
									"});",
									"",
									"pm.test(\"Product ID matches requested ID\", function () {",
									"    const responseJson = pm.response.json();",
									"    const requestedId = parseInt(pm.collectionVariables.get(\"createdProductId\"));",
									"    pm.expect(responseJson.id).to.eql(requestedId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products/{{createdProductId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"{{createdProductId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product by SKU",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Product structure is valid\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('name');",
									"    pm.expect(responseJson).to.have.property('description');",
									"    pm.expect(responseJson).to.have.property('sku');",
									"    pm.expect(responseJson).to.have.property('price');",
									"    pm.expect(responseJson).to.have.property('quantityInStock');",
									"    pm.expect(responseJson).to.have.property('createdAt');",
									"    pm.expect(responseJson).to.have.property('updatedAt');",
									"});",
									"",
									"pm.test(\"Product SKU matches requested SKU\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.sku).to.eql(\"TEST-001\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products/sku/TEST-001",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"sku",
								"TEST-001"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Search results contain search term\", function () {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.length > 0) {",
									"        const product = responseJson[0];",
									"        pm.expect(product.name.toLowerCase()).to.include(\"test\");",
									"    }",
									"});",
									"",
									"if (pm.response.json().length > 0) {",
									"    pm.test(\"Product structure is valid in search results\", function () {",
									"        const product = pm.response.json()[0];",
									"        pm.expect(product).to.have.property('id');",
									"        pm.expect(product).to.have.property('name');",
									"        pm.expect(product).to.have.property('description');",
									"        pm.expect(product).to.have.property('sku');",
									"        pm.expect(product).to.have.property('price');",
									"        pm.expect(product).to.have.property('quantityInStock');",
									"        pm.expect(product).to.have.property('createdAt');",
									"        pm.expect(product).to.have.property('updatedAt');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products/search?searchTerm=Test",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"search"
							],
							"query": [
								{
									"key": "searchTerm",
									"value": "Test"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Product was updated correctly\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.name).to.eql(\"Updated Test Product\");",
									"    pm.expect(responseJson.description).to.eql(\"An updated test product description\");",
									"    pm.expect(responseJson.price).to.eql(39.99);",
									"    pm.expect(responseJson.quantityInStock).to.eql(75);",
									"});",
									"",
									"pm.test(\"Product ID remains unchanged\", function () {",
									"    const responseJson = pm.response.json();",
									"    const originalId = parseInt(pm.collectionVariables.get(\"createdProductId\"));",
									"    pm.expect(responseJson.id).to.eql(originalId);",
									"});",
									"",
									"pm.test(\"UpdatedAt timestamp changed\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('updatedAt');",
									"    pm.expect(responseJson.createdAt).to.not.eql(responseJson.updatedAt);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Test Product\",\n  \"description\": \"An updated test product description\",\n  \"price\": 39.99,\n  \"quantityInStock\": 75\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/products/{{createdProductId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"{{createdProductId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response body is empty\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products/{{createdProductId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"{{createdProductId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product by ID (Not Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response body is empty or contains error info\", function () {",
									"    // After deletion, getting the same product should return 404",
									"    pm.expect(pm.response.code).to.eql(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products/999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product by SKU (Not Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response indicates product not found\", function () {",
									"    pm.expect(pm.response.code).to.eql(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products/sku/NONEXISTENT-SKU",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"sku",
								"NONEXISTENT-SKU"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product (Not Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response indicates product not found\", function () {",
									"    pm.expect(pm.response.code).to.eql(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Non-existent Product\",\n  \"description\": \"This product does not exist\",\n  \"price\": 99.99,\n  \"quantityInStock\": 1\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/products/999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Category Analytics",
			"item": [
				{
					"name": "Get Category Metrics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('totalCategories');",
									"    pm.expect(responseJson).to.have.property('totalProducts');",
									"    pm.expect(responseJson).to.have.property('totalInventoryValue');",
									"    pm.expect(responseJson).to.have.property('categoryAnalytics');",
									"});",
									"",
									"pm.test(\"Category analytics is an array\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.categoryAnalytics).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Numeric values are valid\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.totalCategories).to.be.a('number');",
									"    pm.expect(responseJson.totalProducts).to.be.a('number');",
									"    pm.expect(responseJson.totalInventoryValue).to.be.a('number');",
									"    pm.expect(responseJson.totalCategories).to.be.at.least(0);",
									"    pm.expect(responseJson.totalProducts).to.be.at.least(0);",
									"    pm.expect(responseJson.totalInventoryValue).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/categories/analytics",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories",
								"analytics"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Category Analytics by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Category analytics structure is valid\", function () {",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson).to.have.property('categoryId');",
									"        pm.expect(responseJson).to.have.property('categoryName');",
									"        pm.expect(responseJson).to.have.property('totalProducts');",
									"        pm.expect(responseJson).to.have.property('totalInventoryValue');",
									"        pm.expect(responseJson).to.have.property('averagePrice');",
									"        pm.expect(responseJson).to.have.property('lowStockProducts');",
									"        pm.expect(responseJson).to.have.property('outOfStockProducts');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/categories/analytics/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories",
								"analytics",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Top Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/categories/analytics/top?count=5&sortBy=ProductCount",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories",
								"analytics",
								"top"
							],
							"query": [
								{
									"key": "count",
									"value": "5"
								},
								{
									"key": "sortBy",
									"value": "ProductCount"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Category Trends",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/categories/analytics/trends?daysPeriod=30&count=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories",
								"analytics",
								"trends"
							],
							"query": [
								{
									"key": "daysPeriod",
									"value": "30"
								},
								{
									"key": "count",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Analytics Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Summary has required properties\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('totalCategories');",
									"    pm.expect(responseJson).to.have.property('totalProducts');",
									"    pm.expect(responseJson).to.have.property('totalInventoryValue');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/categories/analytics/summary",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories",
								"analytics",
								"summary"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5126",
			"type": "string"
		},
		{
			"key": "createdProductId",
			"value": "",
			"type": "string"
		}
	]
}