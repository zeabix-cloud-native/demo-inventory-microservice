name: Release Pipeline

on:
  push:
    branches:
      - 'release/*'
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

env:
  DOTNET_VERSION: '9.0.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Determine what type of release this is
  detect-release-type:
    runs-on: ubuntu-latest
    outputs:
      is-release-branch: ${{ steps.check.outputs.is-release-branch }}
      is-release-tag: ${{ steps.check.outputs.is-release-tag }} 
      is-release-pr: ${{ steps.check.outputs.is-release-pr }}
      version: ${{ steps.version.outputs.version }}
    steps:
    - name: Check release type
      id: check
      run: |
        if [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
          echo "is-release-branch=true" >> $GITHUB_OUTPUT
          echo "is-release-tag=false" >> $GITHUB_OUTPUT
          echo "is-release-pr=false" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          echo "is-release-branch=false" >> $GITHUB_OUTPUT
          echo "is-release-tag=true" >> $GITHUB_OUTPUT
          echo "is-release-pr=false" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.base_ref }}" == "main" ]]; then
          echo "is-release-branch=false" >> $GITHUB_OUTPUT
          echo "is-release-tag=false" >> $GITHUB_OUTPUT
          echo "is-release-pr=true" >> $GITHUB_OUTPUT
        else
          echo "is-release-branch=false" >> $GITHUB_OUTPUT
          echo "is-release-tag=false" >> $GITHUB_OUTPUT
          echo "is-release-pr=false" >> $GITHUB_OUTPUT
        fi

    - name: Extract version
      id: version
      run: |
        if [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
          VERSION=${GITHUB_REF#refs/heads/release/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        else
          echo "version=dev" >> $GITHUB_OUTPUT
        fi

  # Full test suite for release branches and PRs to main
  comprehensive-tests:
    runs-on: ubuntu-latest
    needs: detect-release-type
    if: needs.detect-release-type.outputs.is-release-branch == 'true' || needs.detect-release-type.outputs.is-release-pr == 'true'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: demo_inventory_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
      
    - name: Run unit tests
      run: dotnet test --no-build --configuration Release --verbosity normal --logger trx --logger junit --results-directory TestResults
      
    - name: Install test tools
      run: |
        npm install -g newman newman-reporter-htmlextra newman-reporter-ctrf-json
        npm install -g junit-to-ctrf ctrf
        
    - name: Convert unit test results to CTRF
      run: |
        if ls TestResults/*.xml >/dev/null 2>&1; then
          junit-to-ctrf "TestResults/*.xml" -o TestResults/ctrf-unit-tests.json -t "Unit Tests"
        fi
        
    - name: Start API for integration tests
      run: |
        cd backend/src/DemoInventory.API
        dotnet run --configuration Release &
        API_PID=$!
        echo "API_PID=$API_PID" >> $GITHUB_ENV
        # Wait for API to start
        timeout 60 bash -c 'until curl -f http://localhost:5126/health; do sleep 2; done'
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Database=demo_inventory_test;Username=postgres;Password=postgres"
        
    - name: Run API tests
      run: |
        cd tests/postman
        ./run-newman.sh local
        
    - name: Stop API server
      if: always()
      run: |
        if [ ! -z "$API_PID" ]; then
          kill $API_PID || true
        fi
        
    - name: Start full stack for E2E tests
      run: |
        # Start API
        cd backend/src/DemoInventory.API
        dotnet run --configuration Release &
        API_PID=$!
        echo "API_PID=$API_PID" >> $GITHUB_ENV
        
        # Start Frontend
        cd ../../../frontend
        npm ci
        npm run build
        npm run preview &
        FRONTEND_PID=$!
        echo "FRONTEND_PID=$FRONTEND_PID" >> $GITHUB_ENV
        
        # Wait for services
        timeout 60 bash -c 'until curl -f http://localhost:5126/health; do sleep 2; done'
        timeout 60 bash -c 'until curl -f http://localhost:4173; do sleep 2; done'
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Database=demo_inventory_test;Username=postgres;Password=postgres"
        
    - name: Run E2E tests
      uses: cypress-io/github-action@v6
      continue-on-error: true
      with:
        working-directory: tests/e2e
        browser: chrome
        headless: true
        config: baseUrl=http://localhost:4173
        
    - name: Stop all services
      if: always()
      run: |
        [ ! -z "$API_PID" ] && kill $API_PID || true
        [ ! -z "$FRONTEND_PID" ] && kill $FRONTEND_PID || true
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ needs.detect-release-type.outputs.version }}
        path: |
          TestResults/
          tests/postman/test-results/
          tests/e2e/cypress/reports/
          tests/e2e/cypress/screenshots/
          tests/e2e/cypress/videos/

  # Security and quality checks for releases
  security-checks:
    runs-on: ubuntu-latest
    needs: detect-release-type
    if: needs.detect-release-type.outputs.is-release-branch == 'true' || needs.detect-release-type.outputs.is-release-pr == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: csharp, javascript
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Build for CodeQL
      run: |
        dotnet restore
        dotnet build --no-restore --configuration Release
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      
    - name: Run dependency check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'Demo Inventory Microservice'
        path: '.'
        format: 'ALL'
        
    - name: Upload dependency check results
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-report
        path: reports/

  # Build and package for releases  
  build-and-package:
    runs-on: ubuntu-latest
    needs: [detect-release-type, comprehensive-tests, security-checks]
    if: needs.detect-release-type.outputs.is-release-tag == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          
    - name: Build and push Docker images
      run: |
        # Build API image
        docker build -f backend/src/DemoInventory.API/Dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ needs.detect-release-type.outputs.version }} .
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ needs.detect-release-type.outputs.version }}
        
        # Build Frontend image  
        docker build -f frontend/Dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ needs.detect-release-type.outputs.version }} frontend/
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ needs.detect-release-type.outputs.version }}
        
    - name: Create .NET packages
      run: |
        dotnet pack --configuration Release --output ./packages
        
    - name: Upload packages
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: packages/

  # Create GitHub release
  create-release:
    runs-on: ubuntu-latest
    needs: [detect-release-type, build-and-package]
    if: needs.detect-release-type.outputs.is-release-tag == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages
        path: packages/
        
    - name: Generate release notes
      id: release-notes
      run: |
        # Extract version from tag
        VERSION=${{ needs.detect-release-type.outputs.version }}
        
        # Generate release notes from commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          COMMITS=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
        else
          COMMITS=$(git log --pretty=format:"- %s (%h)" HEAD)
        fi
        
        # Create release notes
        cat > release-notes.md << EOF
        ## Release $VERSION
        
        ### Changes
        $COMMITS
        
        ### Docker Images
        - API: \`ghcr.io/${{ github.repository }}-api:$VERSION\`
        - Frontend: \`ghcr.io/${{ github.repository }}-frontend:$VERSION\`
        
        ### Installation
        \`\`\`bash
        # Using Docker Compose
        export VERSION=$VERSION
        docker-compose pull
        docker-compose up -d
        
        # Using individual containers
        docker run -p 5000:8080 ghcr.io/${{ github.repository }}-api:$VERSION
        docker run -p 3000:80 ghcr.io/${{ github.repository }}-frontend:$VERSION
        \`\`\`
        EOF
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.detect-release-type.outputs.version }}
        release_name: Release ${{ needs.detect-release-type.outputs.version }}
        body_path: release-notes.md
        draft: false
        prerelease: ${{ contains(needs.detect-release-type.outputs.version, '-') }}
        
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: packages/
        asset_name: nuget-packages.zip
        asset_content_type: application/zip

  # Staging deployment for release branches
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [detect-release-type, comprehensive-tests]
    if: needs.detect-release-type.outputs.is-release-branch == 'true'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "Deploying release branch to staging environment"
        echo "Version: ${{ needs.detect-release-type.outputs.version }}"
        # Add your staging deployment steps here
        # This could involve:
        # - Building Docker images with staging tags
        # - Deploying to staging Kubernetes cluster
        # - Running staging-specific configurations
        
    - name: Run staging smoke tests
      run: |
        echo "Running smoke tests against staging environment"
        # Add smoke tests here
        # curl -f https://staging.your-domain.com/health
        # newman run staging-smoke-tests.json

  # Production deployment for tags
  deploy-production:
    runs-on: ubuntu-latest
    needs: [detect-release-type, create-release]
    if: needs.detect-release-type.outputs.is-release-tag == 'true'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "Deploying ${{ needs.detect-release-type.outputs.version }} to production"
        # Add your production deployment steps here
        # This could involve:
        # - Pulling the built Docker images
        # - Deploying to production Kubernetes cluster
        # - Running database migrations
        # - Updating load balancer configurations
        
    - name: Run production smoke tests
      run: |
        echo "Running smoke tests against production environment"
        # Add production smoke tests here
        # curl -f https://api.your-domain.com/health
        # newman run production-smoke-tests.json
        
    - name: Notify team
      run: |
        echo "🚀 Successfully deployed ${{ needs.detect-release-type.outputs.version }} to production!"
        # Add notifications here (Slack, email, etc.)
