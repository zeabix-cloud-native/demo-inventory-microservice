name: "ðŸ”§ Copilot Agent Task - Refactoring"
description: "Template for assigning code refactoring tasks to GitHub Copilot"
title: "[Copilot Refactor] Refactor [Component/Feature Name]"
labels: ["copilot-task", "refactoring", "code-quality"]
body:
  - type: markdown
    attributes:
      value: |
        ## ðŸ¤– Copilot Agent Refactoring Assignment
        
        **ðŸ“– Reference**: See `.github/copilot-instructions.md` for comprehensive project guidance, code standards, and design patterns.

  - type: input
    id: refactor-target
    attributes:
      label: "Refactoring Target"
      description: "What needs to be refactored?"
      placeholder: "e.g., ProductService class, User authentication logic"
    validations:
      required: true

  - type: dropdown
    id: refactor-type
    attributes:
      label: "Type of Refactoring"
      description: "What type of refactoring is needed?"
      options:
        - "Extract Method/Class"
        - "Simplify Complex Logic"
        - "Improve Performance"
        - "Enhance Readability"
        - "Reduce Code Duplication"
        - "Improve Error Handling"
        - "Modernize Legacy Code"
        - "Apply Design Patterns"
        - "Improve Testability"
        - "Architecture Restructuring"
    validations:
      required: true

  - type: dropdown
    id: priority-level
    attributes:
      label: "Priority Level"
      description: "How urgent is this refactoring?"
      options:
        - "ðŸ”´ High - Blocking other work or causing issues"
        - "ðŸŸ¡ Medium - Should be done soon for code quality"
        - "ðŸŸ¢ Low - Nice to have when time permits"
    validations:
      required: true

  - type: textarea
    id: current-problems
    attributes:
      label: "Current Problems"
      description: "What issues exist with the current code?"
      placeholder: |
        Problems with current implementation:
        - Code is difficult to understand and maintain
        - Methods are too long (>50 lines)
        - High cyclomatic complexity
        - Code duplication across multiple classes
        - Poor separation of concerns
        - Hard to unit test due to tight coupling
    validations:
      required: true

  - type: textarea
    id: refactor-goals
    attributes:
      label: "Refactoring Goals"
      description: "What should be achieved through this refactoring?"
      placeholder: |
        Goals for the refactoring:
        - Improve code readability and maintainability
        - Reduce method complexity to manageable levels
        - Eliminate code duplication
        - Improve testability with better dependency injection
        - Better separation of concerns following SOLID principles
        - Improve performance by 20-30%
    validations:
      required: true

  - type: textarea
    id: affected-files
    attributes:
      label: "Files to be Refactored"
      description: "List the specific files that need refactoring"
      placeholder: |
        Files requiring refactoring:
        - `backend/src/DemoInventory.Application/Services/ProductService.cs` (main target)
        - `backend/src/DemoInventory.Infrastructure/Repositories/ProductRepository.cs`
        - `backend/tests/DemoInventory.Application.Tests/Services/ProductServiceTests.cs`
    validations:
      required: true

  - type: checkboxes
    id: refactoring-techniques
    attributes:
      label: "Refactoring Techniques to Apply"
      description: "Which refactoring techniques should be used?"
      options:
        - label: "Extract Method - Break down large methods"
        - label: "Extract Class - Separate concerns into different classes"
        - label: "Replace Magic Numbers/Strings with Constants"
        - label: "Introduce Parameter Object - Reduce parameter lists"
        - label: "Replace Conditional with Polymorphism"
        - label: "Move Method - Better class responsibility distribution"
        - label: "Replace Nested Conditional with Guard Clauses"
        - label: "Extract Interface - Improve testability"
        - label: "Apply Strategy Pattern - Handle algorithm variations"

  - type: textarea
    id: design-patterns
    attributes:
      label: "Design Patterns to Apply"
      description: "Which design patterns should be introduced or improved?"
      placeholder: |
        Design patterns to consider:
        
        **Repository Pattern**: 
        - Already exists but needs better abstraction
        - Add specification pattern for complex queries
        
        **Strategy Pattern**:
        - For different product validation rules
        - For different pricing calculation methods
        
        **Factory Pattern**:
        - For creating different types of products

  - type: checkboxes
    id: constraints
    attributes:
      label: "Refactoring Constraints"
      description: "What constraints must be observed during refactoring?"
      options:
        - label: "Maintain backward compatibility of public APIs"
        - label: "Keep existing database schema unchanged"
        - label: "Preserve current functionality exactly"
        - label: "Don't break existing unit tests"
        - label: "Maintain current performance levels (minimum)"
        - label: "Follow existing architectural patterns"
        - label: "Keep changes reviewable (smaller pull requests)"

  - type: textarea
    id: success-criteria
    attributes:
      label: "Success Criteria"
      description: "How will we know the refactoring was successful?"
      placeholder: |
        Success will be measured by:
        
        **Code Quality Metrics:**
        - Reduce cyclomatic complexity from >10 to <5 per method
        - Reduce method length from >50 to <30 lines
        - Eliminate code duplication (detected by tools)
        - Improve code coverage to >90%
        
        **Performance Metrics:**
        - API response time improvement of 20%+
        - Database query count reduction
    validations:
      required: true

  - type: textarea
    id: additional-notes
    attributes:
      label: "Additional Notes"
      description: "Any other information relevant to this refactoring"
      placeholder: |
        Additional considerations:
        - Timeline expectations
        - Resource constraints
        - Dependencies on other teams/systems
        - Business impact of the refactoring
        - Documentation updates required

  - type: markdown
    attributes:
      value: |
        ---
        
        ## ðŸ“‹ For Copilot Agent
        
        1. **Plan the refactoring** - Don't jump straight into changing code
        2. **Make incremental changes** - Small, testable improvements
        3. **Preserve functionality** - Ensure all existing tests still pass
        4. **Improve testability** - Make the code easier to unit test
        5. **Follow SOLID principles** - Single Responsibility, Open/Closed, etc.
        
        **ðŸ“– Full project guidance**: `.github/copilot-instructions.md` contains detailed code standards, design patterns, and architectural guidelines.