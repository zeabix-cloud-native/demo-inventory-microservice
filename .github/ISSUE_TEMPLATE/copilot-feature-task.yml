name: "ðŸ¤– Copilot Agent Task - New Feature"
description: "Template for assigning new feature development tasks to GitHub Copilot"
title: "[Copilot Task] Add [Feature Name]"
labels: ["copilot-task", "feature", "needs-implementation"]
body:
  - type: markdown
    attributes:
      value: |
        ## ðŸ¤– Copilot Agent Task Assignment
        
        **ðŸ“– Reference**: See `.github/copilot-instructions.md` for comprehensive project guidance, architecture patterns, and development standards.

  - type: input
    id: feature-name
    attributes:
      label: "Feature Name"
      description: "What feature should be implemented?"
      placeholder: "e.g., Product Categories Management"
    validations:
      required: true

  - type: dropdown
    id: architecture-layer
    attributes:
      label: "Primary Architecture Layer"
      description: "Which Clean Architecture layer will be primarily affected?"
      options:
        - "Domain Layer"
        - "Application Layer"
        - "Infrastructure Layer"
        - "Presentation Layer (API)"
        - "Presentation Layer (Frontend)"
        - "Cross-cutting (Multiple Layers)"
    validations:
      required: true

  - type: dropdown
    id: technology-stack
    attributes:
      label: "Technology Stack"
      description: "Which technology stack is primarily involved?"
      options:
        - "Backend (.NET/C#)"
        - "Frontend (React/TypeScript)"
        - "Database (EF Core/PostgreSQL)"
        - "Full-stack (Backend + Frontend)"
        - "Infrastructure (Docker/CI-CD)"
    validations:
      required: true

  - type: textarea
    id: feature-description
    attributes:
      label: "Feature Description"
      description: "Provide a detailed description of the feature to be implemented"
      placeholder: |
        Describe the feature:
        - What functionality should be added?
        - How should it integrate with existing code?
        - Business requirements and constraints?
    validations:
      required: true

  - type: textarea
    id: acceptance-criteria
    attributes:
      label: "Acceptance Criteria"
      description: "Define clear acceptance criteria for the feature"
      placeholder: |
        - [ ] Criterion 1: Specific measurable outcome
        - [ ] Criterion 2: Another specific outcome
        - [ ] Criterion 3: Test coverage requirement
        - [ ] Criterion 4: Documentation requirement
    validations:
      required: true

  - type: textarea
    id: api-specification
    attributes:
      label: "API Specification (if applicable)"
      description: "Define the API endpoints and contracts"
      placeholder: |
        ### Endpoints:
        - `GET /api/categories` - Get all categories
        - `POST /api/categories` - Create new category
        
        ### Models:
        ```json
        {
          "id": "guid",
          "name": "string",
          "description": "string"
        }
        ```

  - type: textarea
    id: database-changes
    attributes:
      label: "Database Changes (if applicable)"
      description: "Specify any database schema changes required"
      placeholder: |
        ### New Tables:
        - Categories table with Id, Name, Description columns
        
        ### Existing Table Updates:
        - Add CategoryId foreign key to Products table

  - type: textarea
    id: frontend-requirements
    attributes:
      label: "Frontend Requirements (if applicable)"
      description: "Specify frontend component and UI requirements"
      placeholder: |
        ### Components:
        - CategoryList component for displaying categories
        - CategoryForm component for create/edit operations
        
        ### UI Requirements:
        - Responsive design, loading states, error handling

  - type: checkboxes
    id: implementation-checklist
    attributes:
      label: "Implementation Requirements"
      description: "Standard requirements for feature implementation"
      options:
        - label: "Follow Clean Architecture principles"
        - label: "Include comprehensive unit tests (>80% coverage)"
        - label: "Add API documentation with OpenAPI annotations"
        - label: "Implement proper error handling and logging"
        - label: "Add input validation where appropriate"
        - label: "Follow existing naming conventions"

  - type: dropdown
    id: priority
    attributes:
      label: "Priority Level"
      description: "What is the priority of this feature?"
      options:
        - "ðŸ”´ High - Critical feature needed soon"
        - "ðŸŸ¡ Medium - Important but not urgent"
        - "ðŸŸ¢ Low - Nice to have when time permits"
    validations:
      required: true

  - type: textarea
    id: additional-context
    attributes:
      label: "Additional Context"
      description: "Any additional information that would help implement this feature"
      placeholder: |
        - Related files to reference for patterns
        - Performance considerations
        - Security requirements
        - Integration with external systems

  - type: markdown
    attributes:
      value: |
        ---
        
        ## ðŸ“‹ For Copilot Agent
        
        1. **Follow Clean Architecture** - Respect layer boundaries and dependency directions
        2. **Reference existing patterns** - Look at similar implementations in the codebase
        3. **Include comprehensive tests** - Unit, integration, and API tests as needed
        4. **Consider error scenarios** - Implement proper error handling and logging
        
        **ðŸ“– Full project guidance**: `.github/copilot-instructions.md` contains detailed architecture patterns, coding standards, testing strategy, and development workflow.