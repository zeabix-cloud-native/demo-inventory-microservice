name: "üêõ Copilot Agent Task - Bug Fix"
description: "Template for assigning bug fix tasks to GitHub Copilot"
title: "[Copilot Bug Fix] Fix [Bug Description]"
labels: ["copilot-task", "bug", "needs-fix"]
body:
  - type: markdown
    attributes:
      value: |
        ## ü§ñ Copilot Agent Bug Fix Assignment
        
        This template is designed for assigning bug fix tasks to GitHub Copilot. Please provide comprehensive information about the bug to help Copilot understand and fix the issue.

  - type: input
    id: bug-summary
    attributes:
      label: "Bug Summary"
      description: "Brief description of the bug"
      placeholder: "e.g., Product search returns duplicate results"
    validations:
      required: true

  - type: dropdown
    id: severity
    attributes:
      label: "Bug Severity"
      description: "How severe is this bug?"
      options:
        - "üî¥ Critical - System broken, blocking operations"
        - "üü† High - Major functionality impacted"
        - "üü° Medium - Some functionality impacted"
        - "üü¢ Low - Minor issue, cosmetic problem"
    validations:
      required: true

  - type: dropdown
    id: affected-component
    attributes:
      label: "Affected Component"
      description: "Which part of the system is affected?"
      options:
        - "Backend API"
        - "Frontend UI"
        - "Database Layer"
        - "Authentication"
        - "Business Logic"
        - "Infrastructure/DevOps"
        - "Testing"
        - "Multiple Components"
    validations:
      required: true

  - type: textarea
    id: bug-description
    attributes:
      label: "Detailed Bug Description"
      description: "Provide a comprehensive description of the bug"
      placeholder: |
        Describe the bug in detail:
        - What exactly is happening?
        - What should happen instead?
        - When did this bug first appear?
        - Is it consistently reproducible?
        - What might have caused it?
    validations:
      required: true

  - type: textarea
    id: reproduction-steps
    attributes:
      label: "Steps to Reproduce"
      description: "Provide clear steps to reproduce the bug"
      placeholder: |
        1. Go to the products page
        2. Enter 'laptop' in the search box
        3. Click the search button
        4. Observe the results list
        5. Notice duplicate entries for the same product
    validations:
      required: true

  - type: textarea
    id: expected-behavior
    attributes:
      label: "Expected Behavior"
      description: "What should happen instead of the bug?"
      placeholder: |
        The search should return unique products only, without duplicates.
        Each product should appear only once in the search results.
    validations:
      required: true

  - type: textarea
    id: actual-behavior
    attributes:
      label: "Actual Behavior"
      description: "What actually happens (the bug)?"
      placeholder: |
        The search returns duplicate entries for the same product.
        Some products appear 2-3 times in the results list.
    validations:
      required: true

  - type: textarea
    id: error-logs
    attributes:
      label: "Error Logs/Stack Traces"
      description: "Include any relevant error messages, logs, or stack traces"
      placeholder: |
        ```
        [2024-01-15 10:30:45] ERROR: Duplicate key violation in product search
        System.InvalidOperationException: Sequence contains duplicate elements
           at System.Linq.Enumerable.Single[TSource](IEnumerable`1 source)
           at DemoInventory.Application.Services.ProductService.SearchProducts(String searchTerm)
        ```

  - type: textarea
    id: environment-info
    attributes:
      label: "Environment Information"
      description: "Provide details about the environment where the bug occurs"
      placeholder: |
        - **Environment**: Development/Docker/Production
        - **OS**: Windows 11, macOS 14, Ubuntu 22.04
        - **Browser**: Chrome 120, Firefox 121, Safari 17
        - **.NET Version**: 9.0
        - **Node.js Version**: 20.x
        - **Database**: PostgreSQL 15.x
        - **Docker Version**: 24.x (if applicable)

  - type: textarea
    id: affected-files
    attributes:
      label: "Suspected Affected Files"
      description: "List files that might be related to this bug"
      placeholder: |
        - `backend/src/DemoInventory.Application/Services/ProductService.cs`
        - `backend/src/DemoInventory.Infrastructure/Repositories/ProductRepository.cs`
        - `frontend/src/components/ProductSearch.tsx`
        - `frontend/src/services/productApi.ts`

  - type: textarea
    id: investigation-notes
    attributes:
      label: "Investigation Notes"
      description: "Any debugging or investigation already done"
      placeholder: |
        - Checked the database query - it returns correct unique results
        - The issue seems to be in the application layer mapping
        - Console logs show duplicate objects in the response
        - API endpoint `/api/products/search` returns duplicates
        - Frontend displays whatever the API returns

  - type: checkboxes
    id: bug-impact
    attributes:
      label: "Bug Impact Areas"
      description: "Which areas does this bug impact?"
      options:
        - label: "User Experience"
        - label: "Data Integrity"
        - label: "Performance"
        - label: "Security"
        - label: "API Functionality"
        - label: "UI/UX"
        - label: "Business Logic"
        - label: "Database Operations"

  - type: textarea
    id: proposed-solution
    attributes:
      label: "Proposed Solution (if any)"
      description: "If you have ideas for fixing the bug, describe them"
      placeholder: |
        Potential solutions:
        1. Add `.Distinct()` to the LINQ query in ProductService
        2. Use `GroupBy` to eliminate duplicates based on product ID
        3. Review the database join query for cartesian product issues
        4. Add unique constraint validation in the repository layer

  - type: checkboxes
    id: fix-requirements
    attributes:
      label: "Fix Requirements"
      description: "Requirements for the bug fix"
      options:
        - label: "Fix the root cause, not just symptoms"
        - label: "Add tests to prevent regression"
        - label: "Update documentation if needed"
        - label: "Verify fix doesn't break existing functionality"
        - label: "Test on multiple environments"
        - label: "Follow existing code patterns and conventions"
        - label: "Add logging for debugging if needed"
        - label: "Consider performance implications"

  - type: textarea
    id: test-scenarios
    attributes:
      label: "Test Scenarios for Verification"
      description: "How should the fix be tested?"
      placeholder: |
        ### Unit Tests:
        - Test ProductService.SearchProducts with various search terms
        - Test duplicate elimination logic
        - Test edge cases (empty search, special characters)
        
        ### Integration Tests:
        - Test API endpoint with known duplicate-prone queries
        - Verify database queries return expected results
        
        ### Manual Testing:
        - Search for products that previously returned duplicates
        - Test various search terms and filters
        - Verify no regression in existing functionality

  - type: textarea
    id: additional-context
    attributes:
      label: "Additional Context"
      description: "Any other information that might help fix this bug"
      placeholder: |
        - Related issues or similar bugs
        - Recent changes that might have caused this
        - Workarounds currently in use
        - Impact on users or business operations
        - Urgency timeline for the fix

  - type: markdown
    attributes:
      value: |
        ---
        
        ## üìã For Copilot Agent
        
        When fixing this bug, please:
        
        1. **Analyze the root cause** - Don't just fix symptoms, understand why the bug exists
        2. **Review related code** - Check for similar issues in other parts of the codebase
        3. **Write tests first** - Create failing tests that reproduce the bug
        4. **Fix systematically** - Make minimal changes to address the root cause
        5. **Verify thoroughly** - Ensure the fix works and doesn't break anything else
        6. **Document the fix** - Explain what was wrong and how you fixed it
        7. **Consider edge cases** - Think about scenarios that might trigger similar issues
        8. **Follow patterns** - Use the same coding patterns as the rest of the project
        
        **Debug Process**:
        1. Reproduce the bug locally
        2. Write a failing test that demonstrates the bug
        3. Identify the root cause through debugging
        4. Implement the minimal fix required
        5. Verify all tests pass (old and new)
        6. Test manually to confirm the fix works
        
        **Architecture Reference**: See `.github/copilot-instructions.md` for detailed project guidance.